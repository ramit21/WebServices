<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
	http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ramit</groupId>
	<artifactId>WebServiceWebApp</artifactId>
	<!-- <packaging>war</packaging> -->
	<version>1.0-SNAPSHOT</version>
	<name>WebService Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<properties>
		<jdk.version>1.6</jdk.version>
		<spring.version>4.1.1.RELEASE</spring.version>
		<jstl.version>1.2</jstl.version>
		<junit.version>4.11</junit.version>
		<logback.version>1.0.13</logback.version>
		<jcl-over-slf4j.version>1.7.5</jcl-over-slf4j.version>
	</properties>

	<dependencies>

		<!-- Unit Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>3.2.11.RELEASE</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>3.2.11.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>3.2.11.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>3.2.11.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>3.2.11.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>3.2.11.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.7</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.0.0.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<version>1.0.1.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.0.0.Final</version>
		</dependency>
		<dependency>
			<groupId>org.jboss.logging</groupId>
			<artifactId>jboss-logging</artifactId>
			<version>3.1.0.CR2</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>com.mangofactory</groupId>
			<artifactId>swagger-springmvc</artifactId>
			<version>0.5.0</version>
		</dependency>

	</dependencies>

	<build>
		<directory>WebService</directory>
		<!-- What is there in the resources tag, will appear in Eclipse's Java 
			build path->Sources (using mvn eclipse:eclipse) And these Java files will 
			be compiled, and classes created in target/classes will be part of the war 
			file (using mvn package) -->
		<outputDirectory>WebContent/WEB-INF/classes</outputDirectory>
		<sourceDirectory>src</sourceDirectory>
		<testSourceDirectory>test</testSourceDirectory>
		<testOutputDirectory>WebContent/WEB-INF/classes</testOutputDirectory>
		<!-- final name is the name of the war file -->
		<finalName>WebServiceWebApp</finalName>

		<plugins>
			<!-- Resolve Eclipse project dependencies using mvn eclipse:eclipse -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<!-- Always download and attach dependencies source code -->
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
					<!-- Avoid type mvn eclipse:eclipse -Dwtpversion=2.0 -->
					<wtpversion>2.0</wtpversion>
				</configuration>
			</plugin>

			<!-- Set JDK Compiler Level -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<!-- In the WAR plugin, mention the path to web.xml -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> 
				<configuration> <webXml>WebContent\WEB-INF\web.xml</webXml> </configuration> 
				</plugin> -->

			<!-- For deploying to Tomcat Server using mvn tomcat:run -->
			<!-- <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> 
				<version>2.2</version> <configuration> <path>/WebServiceWebApp</path> </configuration> 
				</plugin> -->

			<!-- <plugin> <artifactId>maven-dependency-plugin</artifactId> <executions> 
				<execution> <phase>install</phase> <goals> <goal>copy-dependencies</goal> 
				</goals> <configuration> <outputDirectory>${project.build.directory}/lib</outputDirectory> 
				</configuration> </execution> </executions> </plugin> -->

			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-antrun-plugin</artifactId> 
				<version>1.1</version> <executions> <execution> <phase>validate</phase> <goals> 
				<goal>run</goal> </goals> <configuration> <tasks> <echo>This is how you display 
				variables</echo> <echo>[project.build.directory = ] ${project.build.directory}</echo> 
				</tasks> </configuration> </execution> </executions> </plugin> -->
		</plugins>

	</build>
</project>